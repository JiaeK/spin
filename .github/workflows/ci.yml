name: Continuous Integration

on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache esy dependencies
        uses: actions/cache@v1
        id: cache
        with:
          path: _export
          key: ${{ runner.OS }}-build-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install esy
        run: npm install -g @esy-nightly/esy@latest

      - name: Import dependencies
        if: steps.cache.outputs.cache-hit == 'true'
        run: esy import-build _export/*

      - name: Install dependencies
        run: esy install

      - name: Build
        run: esy build

      - name: Check formatting
        run: |
          esy fmt
          if [ -n "$(git status --porcelain)" ]; then
            echo "There are differences:"
            git status --porcelain
            echo "----"
            echo ""
            echo 'Please run `esy format` locally to fix the issues.'
            exit 1
          fi
        # Run formatting check only once
        if: matrix.os == 'ubuntu-latest'

      - name: Run tests
        run: esy test

      - name: Create a NPM release
        run: esy release

      - name: Export dependencies
        run: esy export-dependencies

      - name: Get Esy binary path
        id: esy_binary_path
        shell: bash
        run: |
          # from https://stackoverflow.com/a/24848739/617787
          s=$(pwd); d=$(dirname $(esy x which spin.exe));
          while [ "${d#$s/}" == "${d}" ]
          do s=$(dirname $s);b="../${b}"; done; 
          ESY__BINARY_PATH=${b}${d#$s/}/spin.exe
          echo "ESY__BINARY_PATH: $ESY__BINARY_PATH"
          echo "##[set-output name=path;]$ESY__BINARY_PATH"

      - name: (only on release) Upload artifacts for ${{ matrix.os }}
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: ${{ steps.esy_binary_path.outputs.path }}

  publish:
    needs: build
    if: github.event_name != 'pull_request'
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
          registry-url: "https://registry.npmjs.org"

      - name: Download linux artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: binaries/linux

      - name: Download macOS artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: macos-latest
          path: binaries/darwin

      - name: Download windows artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: binaries/windows

      - name: Move artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        run: |
          mkdir -p bin
          mv binaries/darwin/spin.exe bin/spin-darwin-x64.exe
          mv binaries/windows/spin.exe bin/spin-win-x64.exe
          mv binaries/linux/spin.exe bin/spin-linux-x64.exe

      - name: Upload spin-darwin-x64.exe to Github release 
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        id: upload-release-asset-darwin-x64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/spin-darwin-x64.exe
          asset_name: spin-darwin-x64.exe
          asset_content_type: binary/octet-stream

      - name: Upload spin-win-x64.exe to Github release 
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        id: upload-release-asset-win-x64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/spin-win-x64.exe
          asset_name: spin-win-x64.exe
          asset_content_type: binary/octet-stream

      - name: Upload spin-linux-x64.exe to Github release 
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        id: upload-release-asset-linux-x64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/spin-linux-x64.exe
          asset_name: spin-linux-x64.exe
          asset_content_type: binary/octet-stream

      - name: Publish
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
